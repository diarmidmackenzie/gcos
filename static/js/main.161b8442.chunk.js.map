{"version":3,"sources":["Questions.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["GcosIntro","props","type","onClick","moveCursor","GcosQuestions","nextActive","scores","cursor","nextText","questions","length","Situation","index","question","scoreGroup","setScore","disabled","className","map","score","Response","groupIndex","responseText","responses","selectedValue","Number","Array","from","keys","item","Option","value","defaultChecked","htmlFor","name","GcosResults","totalScore","codeSeries","reduce","a","b","getSds","distribution","scaledValue","console","log","diff","mean","sds","sd","normalized","normalizedValue","percentile","percentileScore","z","factK","sum","term","k","loopStop","Math","exp","abs","pow","GetZPercent","displayPercentile","toPrecision","percentileDescription","gcosColorStyle","A","C","I","style","scoreToRGB","floor","toString","padStart","r","g","aScore","coding","cScore","iScore","aPercentile","all","cPercentile","iPercentile","aNormalized","cNormalized","iNormalized","toFixed","resetSurvey","queryClient","QueryClient","GcosApp","scoresArray","useState","gcosScores","setGcosScores","questionCursor","setQuestionCursor","useQuery","fetch","then","res","json","loadingQuestions","isLoading","errorQuestions","error","questionData","data","message","delta","newCursor","id","subindex","newScores","newSubGroupScores","window","confirm","App","QueryClientProvider","client","initialIsOpen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.161b8442.chunk.js","sourcesContent":["\r\n// questions = data for questions.\r\n// cursor = index of situation to show\r\n// scores = data recording scores\r\n// setScore = callback to set a score\r\n// moveCursor = callback to move the cursor\r\n\r\nexport function GcosIntro(props) {\r\n\r\n  return (\r\n    <>\r\n      <p> This page provides a self-assessment of your General Causality Orientation.</p>\r\n      <p> To Begin the Survey Press the Start button </p>\r\n      <button type=\"button\"\r\n              onClick = {() => props.moveCursor(1)}>Start</button>\r\n      <p> Some notes about privacy...</p>\r\n      <p> (No data is collected.  No data leaves the browser.)</p>\r\n      <p> Some notes about how the survey works...</p>\r\n      <p> (choose a 'likelihood' for each possible response)</p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport function GcosQuestions(props) {\r\n\r\n  //var nextActive = props.scores[props.cursor].every((e) => e > 0);\r\n  var nextActive = ((props.scores[props.cursor][0] > 0 ) &&\r\n                    (props.scores[props.cursor][1] > 0 ) &&\r\n                    (props.scores[props.cursor][2] > 0 ))\r\n\r\n  var nextText = (props.cursor === (props.questions.length - 1)) ?\r\n                 \"Finish\" : \"Next\"\r\n\r\n  return (\r\n    <>\r\n      <Situation\r\n        index = {props.cursor}\r\n        question = {props.questions[props.cursor].question}\r\n        questions = {props.questions}\r\n        scoreGroup = {props.scores[props.cursor]}\r\n        setScore = {props.setScore}/>\r\n      <button type=\"button\"\r\n              onClick = {() => props.moveCursor(-1)}>Prev</button>\r\n      <button type=\"button\"\r\n              onClick = {() => props.moveCursor(1)}\r\n              disabled = {nextActive ? null : true}>{nextText}</button>\r\n    </>\r\n  )\r\n};\r\n\r\n// index = question index\r\n// questions = data for questions.\r\n// question = text of question\r\n// scoreGroup = group of 3 scores\r\n// setScore = callback to set a score\r\nfunction Situation(props) {\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <p className=\"number\">{(props.index + 1) + \"/\" + props.questions.length + \" \"} </p>\r\n        <p className=\"question\">{props.question}</p>\r\n        <br/>\r\n      </div>\r\n      <div>\r\n        {props.scoreGroup.map((score, index) => (\r\n            <Response\r\n              key = {\"Q\" + props.index + \"-\" + Number(index)}\r\n              groupIndex = {props.index}\r\n              index = {index}\r\n              responseText = {props.questions[props.index].responses[index]}\r\n              score = {score}\r\n              setScore = {props.setScore}\r\n              selectedValue = {props.scoreGroup[index]}/>\r\n          ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// groupIndex = index of question group\r\n// index = index of response within this group\r\n// responseText = text of this response\r\n// setScore = callback to set a score\r\n// selectedValue = which value (if any) is checked.\r\nfunction Response(props) {\r\n\r\n  const prepends = [\"a) \", \"b) \", \"c) \"];\r\n\r\n  return (\r\n    <>\r\n      <div className = \"response\">\r\n        {prepends[props.index] + props.responseText}\r\n      </div>\r\n      <div className = \"radio-group\">\r\n      {\r\n        Array.from(Array(7).keys()).map((item) => (\r\n          <Option\r\n            key = {item + 1}\r\n            groupIndex = {props.groupIndex}\r\n            index = {props.index}\r\n            value = {item + 1}\r\n            defaultChecked = {props.selectedValue === (item + 1)}\r\n            setScore = {props.setScore}\r\n          />\r\n        ))\r\n      }\r\n      </div>\r\n      <div className = \"radio-key\">\r\n        very unlikely\r\n      </div>\r\n      <div className = \"radio-key\">\r\n        moderately likely\r\n      </div>\r\n      <div className = \"radio-key\">\r\n        very likely\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// groupIndex = index of question group\r\n// index = index of response within this group\r\n// value = value to choose\r\n// setScore = callback to set a score\r\n// defaultChecked = whether or not this option is checked (true/false)\r\nfunction Option(props) {\r\n\r\n  return(\r\n    <>\r\n      <label htmlFor={props.value}>\r\n        <input type = \"radio\"\r\n               name = {props.groupIndex + \"-\" + props.index}\r\n               value = {props.value}\r\n               defaultChecked = {props.defaultChecked ? \"checked\" : null}\r\n               onClick = {() => props.setScore(props.groupIndex, props.index, props.value)}/>\r\n        {props.value}\r\n      </label>\r\n    </>\r\n  )\r\n}\r\n","\r\n\r\n// coding = data on mapping from responses to A/C/I\r\n// distirbution = data about distribution of scores in general population\r\n// scores = scores data\r\n// moveCursor = callback to move cursor\r\n// resetSurvey = callback to reset Survey and return to main screen/>\r\nexport function GcosResults(props) {\r\n\r\n  // combine coding series + scores to get a total score for\r\n  // A, I or C.\r\n  function totalScore(codeSeries, scores) {\r\n    // look up the value for the coded score in the scores data.\r\n    // then sum using a simple reduce.\r\n    var total = codeSeries.map((item, index) =>\r\n                               scores[index][item - 1]).reduce((a, b) => a + b);\r\n\r\n    return (total)\r\n  }\r\n\r\n  function getSds(distribution, value) {\r\n\r\n    // scale value by 12/17 (distribution data is from 12 question survey)\r\n    const scaledValue = (value * 12) / 17;\r\n    console.log(`Scaled value: ${scaledValue}`)\r\n    const diff = scaledValue - distribution.mean;\r\n    console.log(`Diff: ${diff}`)\r\n    var sds = diff / distribution.sd;\r\n    console.log(`SDs: ${sds}`)\r\n\r\n    // Cap SDs at 4.\r\n    if (sds > 4) {\r\n      sds = 4;\r\n    }\r\n    if (sds < -4) {\r\n      sds = -4;\r\n    }\r\n\r\n    return (sds);\r\n  }\r\n\r\n\r\n  function normalized(distribution, value) {\r\n\r\n    const sds = getSds(distribution, value)\r\n\r\n    // each SD maps to 15 percentage points in this scale\r\n    // ( 40 = -4 SDs, 160 = +4 SDs);\r\n    const normalizedValue = 100 + (sds * 15)\r\n    console.log(`Normalized: ${normalizedValue}`)\r\n\r\n    return (normalizedValue);\r\n  }\r\n\r\n  function percentile(distribution, value) {\r\n\r\n    const sds = getSds(distribution, value)\r\n    console.log(`SDs: ${sds}`)\r\n\r\n    const percentileScore = GetZPercent(sds)\r\n    console.log(`Percentile: ${percentileScore}`)\r\n\r\n    return (percentileScore)\r\n  }\r\n\r\n  // Borrowed from stack overflow:\r\n  // https://stackoverflow.com/questions/16194730/seeking-a-statistical-javascript-function-to-return-p-value-from-a-z-score\r\n  function GetZPercent(z)\r\n  {\r\n    //z == number of standard deviations from the mean\r\n\r\n    //if z is greater than 6.5 standard deviations from the mean\r\n    //the number of significant digits will be outside of a reasonable\r\n    //range\r\n    if ( z < -6.5)\r\n      return 0.0;\r\n    if( z > 6.5)\r\n      return 1.0;\r\n\r\n    var factK = 1;\r\n    var sum = 0;\r\n    var term = 1;\r\n    var k = 0;\r\n    var loopStop = Math.exp(-23);\r\n    while(Math.abs(term) > loopStop)\r\n    {\r\n      term = .3989422804 * Math.pow(-1,k) * Math.pow(z,k) / (2 * k + 1) / Math.pow(2,k) * Math.pow(z,k+1) / factK;\r\n      sum += term;\r\n      k++;\r\n      factK *= k;\r\n\r\n    }\r\n    sum += 0.5;\r\n\r\n    return sum;\r\n  }\r\n\r\n  // displaying percentiles is a subtle art.\r\n  // we don't want arbitrary accuracy.\r\n  // but for values like 99.999, we do want several significant figures\r\n  // This function provides that.\r\n  // percentile input is as a decimal (0 to 1).\r\n  // output is a percentile string, e.g. \"99.99th percentile\"\r\n  function displayPercentile(percentile) {\r\n    // implementation - series of cut-offs\r\n    // with a different precision for each cut-off.\r\n    var string = \"\"\r\n\r\n    percentile = percentile * 100\r\n\r\n    if (percentile <= 0.1) {\r\n      string = percentile.toPrecision(1);\r\n    }\r\n    else if (percentile <= 99) {\r\n      string = percentile.toPrecision(2);\r\n    }\r\n    else if (percentile <= 99.9) {\r\n      string = percentile.toPrecision(3);\r\n    }\r\n    else if (percentile <= 99.99) {\r\n      string = percentile.toPrecision(4);\r\n    }\r\n    else if (percentile <= 99.999) {\r\n      string = percentile.toPrecision(5);\r\n    }\r\n    else {\r\n      // Just declare as 100th percentile.\r\n      string = percentile.toPrecision(1);\r\n    }\r\n\r\n    return (string)\r\n  }\r\n\r\n  // Get a text description from a percentile\r\n  function percentileDescription(percentile) {\r\n    // implementation - series of cut-offs\r\n    // with a different description for each cut-off.\r\n    var string = \"\"\r\n\r\n    percentile = percentile * 100\r\n\r\n    if (percentile <= 1) {\r\n      string = \"exceptionally low\"\r\n    }\r\n    else if (percentile <= 10) {\r\n      string = \"very low\"\r\n    }\r\n    else if (percentile <= 30) {\r\n      string = \"low\"\r\n    }\r\n    else if (percentile <= 70) {\r\n      string = \"normal\"\r\n    }\r\n    else if (percentile <= 90) {\r\n      string = \"high\"\r\n    }\r\n    else if (percentile <= 99) {\r\n      string = \"very high\"\r\n    }\r\n    else {\r\n      string = \"exceptionally high\"\r\n    }\r\n\r\n    return (string)\r\n  }\r\n\r\n  // Take normalized A, C & I scores and generate a style string for\r\n  // a block of color.\r\n  function gcosColorStyle(A, C, I) {\r\n\r\n    var style = {};\r\n\r\n    // Control = red, Autonomy = green, Impersonal = blue\r\n    // normalized scores are on a scale of 40 to 160.  Need to map to a scale\r\n    // of 0 to 255.\r\n    function scoreToRGB(score) {\r\n      return Math.floor((score - 40) * 255 / 120).toString(16).padStart(2,'0');\r\n    }\r\n\r\n    const r = scoreToRGB(C);\r\n    const g = scoreToRGB(A);\r\n    const b = scoreToRGB(I);\r\n\r\n    style['backgroundColor'] = \"#\" + r + g + b;\r\n\r\n    if ((Number(\"0x\" + r) +\r\n         Number(\"0x\" + g) +\r\n         Number(\"0x\" + b)) > 400) {\r\n\r\n       style['color'] = \"black\"\r\n    }\r\n    else\r\n    {\r\n       style['color'] = \"white\"\r\n    }\r\n\r\n    return (style)\r\n  }\r\n\r\n  // calculate scores for A, I and C.\r\n  var aScore = totalScore(props.coding.A,\r\n                          props.scores);\r\n  var cScore = totalScore(props.coding.C,\r\n                          props.scores);\r\n  var iScore = totalScore(props.coding.I,\r\n                          props.scores);\r\n\r\n  var aPercentile = percentile(props.distribution.all.A,\r\n                               aScore);\r\n  var cPercentile = percentile(props.distribution.all.C,\r\n                               cScore);\r\n  var iPercentile = percentile(props.distribution.all.I,\r\n                               iScore);\r\n\r\n  var aNormalized = normalized(props.distribution.all.A,\r\n                               aScore);\r\n  var cNormalized = normalized(props.distribution.all.C,\r\n                               cScore);\r\n  var iNormalized = normalized(props.distribution.all.I,\r\n                               iScore);\r\n\r\n return (\r\n   <>\r\n     <div>\r\n       <p>These are your normalized results on each orientation.</p>\r\n       <div className = \"color-block\"\r\n          style = {gcosColorStyle(aNormalized, cNormalized, iNormalized)}>\r\n          <div className = \"norm-scores\">\r\n             <p>Autonomy: {aNormalized.toFixed(0)} ({percentileDescription(aPercentile)})</p>\r\n             <p>Controlled: {cNormalized.toFixed(0)} ({percentileDescription(cPercentile)})</p>\r\n             <p>Impersonal: {iNormalized.toFixed(0)} ({percentileDescription(iPercentile)})</p>\r\n           </div>\r\n         </div>\r\n       <p>(mean = 100, 1 S.D. = 15 points)</p>\r\n       <p>These are your results as percentiles.</p>\r\n       <div className = \"color-block\"\r\n          style = {gcosColorStyle(aNormalized, cNormalized, iNormalized)}>\r\n          <div className = \"percentile-scores\">\r\n             <p>Autonomy: {displayPercentile(aPercentile)}th ({percentileDescription(aPercentile)})</p>\r\n             <p>Controlled: {displayPercentile(cPercentile)}th ({percentileDescription(cPercentile)})</p>\r\n             <p>Impersonal: {displayPercentile(iPercentile)}th ({percentileDescription(iPercentile)})</p>\r\n           </div>\r\n        </div>\r\n        <p>The background color used above represents your overall control orientation.</p>\r\n        <p><span className = \"green\"> Autonomy </span>\r\n           <span className = \"red\"> Controlled </span>\r\n           <span className = \"blue\"> Impersonal </span>\r\n         </p>\r\n     </div>\r\n     <br/>\r\n     <button type=\"button\" onClick = {() => props.moveCursor(-1)}>Back</button>\r\n     <button type=\"button\" onClick = {() => props.resetSurvey()}>Restart</button>\r\n   </>\r\n )\r\n\r\n}\r\n","\nimport { useState } from \"react\";\nimport { useQuery, QueryClient, QueryClientProvider } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\nimport { GcosQuestions, GcosIntro } from './Questions.js'\nimport { GcosResults } from './Results.js'\nimport './App.css';\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"App\">\n        <GcosApp/>\n      </div>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  );\n}\n\nfunction GcosApp() {\n\n  // Assume 17 questions, 3 answers for each\n  // for testing, you can preset answers to non-zero values.\n  var scoresArray = Array.from(Array(17), () => [0, 0, 0]);\n  const [gcosScores, setGcosScores] = useState(scoresArray);\n  const [questionCursor, setQuestionCursor] = useState(-1);\n\n  const { isLoading: loadingQuestions,\n          error: errorQuestions,\n          data : questionData } = useQuery('questions', () =>\n       fetch('/data/questions.json').then(res =>\n         res.json()\n       )\n     )\n\n  if (loadingQuestions) return 'Loading...'\n\n  if (errorQuestions) return 'An error has occurred: ' + errorQuestions.message\n\n  // update the Score for a particular question index, and subindex\n  // (i.e. a possible response to that question)\n  function updateScore(index, subindex, score) {\n\n    // gcosScores is immutable so we need to work on a copy...\n    // ... and since this will be a shallow copy, we also need to copy\n    // the array containing the value we are acually modifying.\n    var newScores = [...gcosScores];\n    var newSubGroupScores = [...newScores[index]]\n    newSubGroupScores[subindex] = score;\n    newScores[index] = newSubGroupScores;\n    setGcosScores(newScores);\n  }\n\n  function resetSurvey() {\n\n    if (window.confirm(\"If you continue, you will lose all your answer data.\")) {\n      var newScores = Array.from(Array(17), () => [0, 0, 0]);\n      setGcosScores(newScores);\n      setQuestionCursor(-1);\n    }\n  }\n\n  function moveCursor(delta) {\n    var newCursor = questionCursor + delta;\n    if (newCursor >= -1 && newCursor <= scoresArray.length) {\n      setQuestionCursor(newCursor);\n    }\n  }\n\n  if (questionCursor < 0) {\n    return (\n        <>\n          <div id=\"questions\">\n            <GcosIntro\n             cursor = {questionCursor}\n             moveCursor = {moveCursor}/>\n          </div>\n        </>\n    );\n  }\n  else if (questionCursor < scoresArray.length) {\n\n    return (\n        <>\n          <div id=\"questions\">\n            <GcosQuestions\n             questions = {questionData['questions']}\n             cursor = {questionCursor}\n             scores = {gcosScores}\n             setScore = {updateScore}\n             moveCursor = {moveCursor}/>\n          </div>\n        </>\n    );\n  }\n  else {\n    return (\n      <>\n        <div id=\"results\">\n          <GcosResults\n           coding = {questionData['coding']}\n           distribution = {questionData['distribution']}\n           scores = {gcosScores}\n           moveCursor = {moveCursor}\n           resetSurvey = {resetSurvey}/>\n        </div>\n      </>\n    );\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}